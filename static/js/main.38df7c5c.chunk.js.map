{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","connect","App","useState","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","useRef","userVideo","connectionRef","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","data","from","signal","style","textAlign","color","className","playsInline","muted","ref","autoPlay","width","transform","TextField","label","variant","value","onChange","e","target","marginBottom","text","Button","startIcon","fontSize","onClick","destroy","IconButton","aria-label","peer","Peer","initiator","trickle","emit","userToCall","signalData","callUser","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38df7c5c.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport AssignmentIcon from '@material-ui/icons/Assessment'\r\nimport PhoneIcon from '@material-ui/icons/Phone'\r\nimport React, { useEffect, useState, useRef } from 'react'\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from 'simple-peer'\r\nimport io from 'socket.io-client'\r\nimport './App.css'\r\n\r\nconst socket = io.connect('http://localhost:7000')\r\n\r\nconst App = () => {\r\n    const [me, setMe] = useState('')\r\n    const [stream, setStream] = useState()\r\n    const [receivingCall, setReceivingCall] = useState(false)\r\n    const [caller, setCaller] = useState(\"\")\r\n    const [callerSignal, setCallerSignal] = useState()\r\n    const [callAccepted, setCallAccepted] = useState(false)\r\n    const [idToCall, setIdToCall] = useState(\"\")\r\n    const [callEnded, setCallEnded] = useState(false)\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const myVideo = useRef()\r\n    const userVideo = useRef()\r\n    const connectionRef = useRef()\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n            setStream(stream)\r\n            myVideo.current.srcObject = stream\r\n        })\r\n\r\n        socket.on('me', (id) => {\r\n            setMe(id)\r\n        })\r\n\r\n        socket.on('callUser', (data) => {\r\n            setReceivingCall(true)\r\n            setCaller(data.from)\r\n            setName(data.name)\r\n            setCallerSignal(data.signal)\r\n        })\r\n    }, [])\r\n\r\n    const callUser = (id) => {\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            stream: stream\r\n        })\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('callUser', {\r\n                userToCall: id,\r\n                signalData: data,\r\n                from: me,\r\n                name: name,\r\n            })\r\n        })\r\n\r\n        peer.on('stream', (stream) => {\r\n            userVideo.current.srcObject = stream\r\n        })\r\n\r\n        socket.on('callAccepted', (signal) => {\r\n            setCallAccepted(true)\r\n            peer.signal(signal)\r\n        })\r\n\r\n        connectionRef.current = peer\r\n    }\r\n\r\n    const answerCall = () => {\r\n        setCallAccepted(true)\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            stream: stream\r\n        })\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answerCall', { signal: data, to: caller })\r\n        })\r\n\r\n        peer.on('stream', (stream) => {\r\n            userVideo.current.srcObject = stream\r\n        })\r\n\r\n        peer.signal(callerSignal)\r\n        connectionRef.current = peer\r\n    }\r\n\r\n    const leaveCall = () => {\r\n        setCallEnded(true)\r\n        connectionRef.current.destroy()\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n            <div className=\"container\">\r\n                <div className=\"video-container\">\r\n                    <div className=\"video\">\r\n                        {stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\", transform: 'scaleX(-1)' }} />}\r\n                    </div>\r\n                    <div className=\"video\">\r\n                        {callAccepted && !callEnded ?\r\n                        <video playsInline ref={userVideo} autoPlay style={{ width: \"300px\", transform: 'scaleX(-1)' }} />:\r\n                        null}\r\n                    </div>\r\n                </div>\r\n                <div className=\"myId\">\r\n                    <TextField\r\n                        id=\"filled-basic\"\r\n                        label=\"Name\"\r\n                        variant=\"filled\"\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        style={{ marginBottom: \"20px\" }}\r\n                    />\r\n                    <CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n                        <Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n                            Copy ID\r\n                        </Button>\r\n                    </CopyToClipboard>\r\n\r\n                    <TextField\r\n                        id=\"filled-basic\"\r\n                        label=\"ID to call\"\r\n                        variant=\"filled\"\r\n                        value={idToCall}\r\n                        onChange={(e) => setIdToCall(e.target.value)}\r\n                    />\r\n                    <div className=\"call-button\">\r\n                        {callAccepted && !callEnded ? (\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n                                End Call\r\n                            </Button>\r\n                        ) : (\r\n                            <IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n                                <PhoneIcon fontSize=\"large\" />\r\n                            </IconButton>\r\n                        )}\r\n                        {idToCall}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {receivingCall && !callAccepted ? (\r\n                            <div className=\"caller\">\r\n                            <h1 >{name} is calling...</h1>\r\n                            <Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n                                Answer\r\n                            </Button>\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}